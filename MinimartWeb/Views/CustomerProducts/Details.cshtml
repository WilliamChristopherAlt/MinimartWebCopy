@model MinimartWeb.ViewModels.ProductDetailViewModel
@{
    ViewData["Title"] = Model.Product.ProductName + " - Chi tiết sản phẩm";
    string FormatCurrency(decimal price) => price.ToString("N0") + "đ";
}

<nav aria-label="breadcrumb" class="mb-4">
    <ol class="breadcrumb">
        <li class="breadcrumb-item"><a asp-controller="Home" asp-action="Index">Trang Chủ</a></li>
        @if (Model.Product.Category != null)
        {
            <li class="breadcrumb-item"><a asp-controller="CustomerProducts" asp-action="Index" asp-route-categoryId="@Model.Product.CategoryID">@Model.Product.Category.CategoryName</a></li>
        }
        <li class="breadcrumb-item active" aria-current="page">@Model.Product.ProductName</li>
    </ol>
</nav>

<div class="row g-4">
    @* Cột hình ảnh sản phẩm *@
    <div class="col-lg-5 col-md-6 text-center">
        @if (!string.IsNullOrEmpty(Model.Product.ImagePath))
        {
            <img src="~/images/products/@Model.Product.ImagePath" alt="@Model.Product.ProductName" class="img-fluid rounded shadow-sm mb-3 border" style="max-height: 450px;" />
        }
        else
        {
            <img src="~/images/placeholder.png" alt="Không có ảnh" class="img-fluid rounded shadow-sm mb-3 border" style="max-height: 450px;" />
        }
    </div>

    @* Cột thông tin sản phẩm và nút mua *@
    <div class="col-lg-7 col-md-6">
        <h1 class="h2 mb-3 fw-light">@Model.Product.ProductName</h1>
        <div class="mb-3 pb-2 border-bottom">
            <span class="fs-3 text-danger fw-bold me-3">@FormatCurrency(Model.Product.Price)</span>
        </div>
        <div class="mb-3">
            <span class="me-3">Tình trạng:</span>
            @if (Model.Product.StockAmount > 0 && Model.Product.IsActive)
            {
                <span class="badge bg-success py-2"><i class="fas fa-check me-1"></i> Còn hàng</span>
            }
            else
            {
                <span class="badge bg-secondary py-2"><i class="fas fa-times me-1"></i> Hết hàng</span>
            }
        </div>
        <dl class="row mb-3 small text-muted">
            @if (Model.Product.Category != null)
            {
                <dt class="col-sm-4">Danh mục:</dt>
                <dd class="col-sm-8">@Model.Product.Category.CategoryName</dd>
            }
            @if (Model.Product.Supplier != null)
            {
                <dt class="col-sm-4">Nhà cung cấp:</dt>
                <dd class="col-sm-8">@Model.Product.Supplier.SupplierName</dd>
            }
            @if (Model.Product.MeasurementUnit != null)
            {
                <dt class="col-sm-4">Đơn vị tính:</dt>
                <dd class="col-sm-8">@Model.Product.MeasurementUnit.UnitName</dd>
            }
            @if (Model.Product.ExpirationDurationDays.HasValue && Model.Product.ExpirationDurationDays > 0)
            {
                <dt class="col-sm-4">Hạn SD (từ NSX):</dt>
                <dd class="col-sm-8">@Model.Product.ExpirationDurationDays ngày</dd>
            }
            @if (Model.Product.Tags != null && Model.Product.Tags.Any())
            {
                <dt class="col-sm-4">Thẻ liên quan:</dt>
                <dd class="col-sm-8">
                    @foreach (var tag in Model.Product.Tags)
                    {
                        <span class="badge bg-secondary me-1">@tag</span>
                    }
                </dd>
            }
        </dl>
        <hr class="my-3">

        @if (Model.Product.StockAmount > 0 && Model.Product.IsActive)
        {
            @* Form này dùng chung cho cả AddToCart và BuyNow (BuyNow sẽ đổi action bằng JS) *@
            <form method="post" id="productActionForm_@Model.Product.ProductTypeID">
                <input type="hidden" name="productId" value="@Model.Product.ProductTypeID" />
                <input type="hidden" name="returnUrl" value="@(Context.Request.Path + Context.Request.QueryString.Value)" />

                @if (User.Identity != null && User.Identity.IsAuthenticated && (User.IsInRole("Admin") || User.IsInRole("Staff")))
                {
                    <div class="text-muted small">Chức năng mua hàng không khả dụng với vai trò của bạn.</div>
                }
                else
                {
                    <div class="row g-3 align-items-center mb-3">
                        <div class="col-md-4 col-lg-3">
                            <label for="quantity_@Model.Product.ProductTypeID" class="form-label small mb-1 d-block">Số lượng:</label>
                            <div class="input-group input-group-sm" style="width: 120px;">
                                <button class="btn btn-outline-secondary" type="button" onclick="updateQuantityOnDetailPage(@Model.Product.ProductTypeID, -1, @((int)Model.Product.StockAmount))">-</button>
                                @{
                                    var isContinuous = Model.Product?.MeasurementUnit?.IsContinuous ?? false;
                                    var minVal = isContinuous ? "0.01" : "1";
                                    var stepVal = isContinuous ? "0.01" : "1";
                                }
                                <input type="number"
                                       name="quantity"
                                       id="quantity_@Model.Product.ProductTypeID"
                                       class="form-control text-center"
                                       value="1"
                                       min="@minVal"
                                       max="@Model.Product.StockAmount"
                                       step="@stepVal"
                                       aria-label="Số lượng" />
                                <button class="btn btn-outline-secondary" type="button" onclick="updateQuantityOnDetailPage(@Model.Product.ProductTypeID, 1, @((int)Model.Product.StockAmount))">+</button>
                            </div>
                        </div>
                        <div class="col-md-8 col-lg-9">
                            <div class="d-flex gap-2 mt-md-3">
                                <button type="button" class="btn btn-outline-warning flex-grow-1 product-action-btn add-to-cart-ajax">
                                    <i class="fas fa-cart-plus me-1"></i> Thêm vào giỏ
                                </button>

                                <button type="button" class="btn btn-danger flex-grow-1 product-action-btn"
                                        onclick="submitBuyNow(@Model.Product.ProductTypeID)">
                                    <i class="fas fa-bolt me-1"></i> Mua ngay
                                </button>
                            </div>
                        </div>
                    </div>
                }

            </form>
        }
        else
        {
            <button type="button" class="btn btn-secondary" disabled> <i class="fas fa-times-circle me-1"></i> Hết hàng</button>
        }

        <hr class="my-4">
        <div class="product-description-section">
            <h5 class="h6">Mô tả chi tiết sản phẩm</h5>
            <div class="text-muted small">@Html.Raw(Model.Product.ProductDescription)</div>
        </div>
    </div>
</div>

@* --- PHẦN SẢN PHẨM GỢI Ý (Sử dụng Swiper Carousel) --- *@
@if (Model.RecommendedProducts.Any())
{
    <hr class="my-5">
    <section class="mb-5 recommended-products-section-detail" id="recommendedProductsOnDetailPage">
        <div class="d-flex align-items-center mb-3">
            <h3 class="me-2 mb-0 h5 fw-bold text-primary"><i class="fas fa-lightbulb me-1"></i> Gợi ý cho bạn</h3>
        </div>
        <div class="swiper recommended-swiper-detail">
            <div class="swiper-wrapper">
                @foreach (var product in Model.RecommendedProducts)
                {
                    <div class="swiper-slide"> <partial name="_HotDealProductCard" model="product" /> </div>
                }
            </div>
            <div class="swiper-pagination recommended-pagination-detail"></div> <div class="swiper-button-next recommended-next-detail"></div> <div class="swiper-button-prev recommended-prev-detail"></div>
    </section>
}

@* --- Phần "Có thể bạn cũng thích" (Dạng lưới) --- *@
@if (Model.OtherProducts.Any())
{
    <hr class="my-5">
    <section class="other-products-section-detail" id="otherProductsOnDetailPage">
        <h3 class="mb-3 h5 fw-bold">Có thể bạn cũng thích</h3>
        <div class="row row-cols-2 row-cols-sm-2 row-cols-md-3 row-cols-lg-4 row-cols-xl-5 g-3 product-grid-layout">
            @foreach (var product in Model.OtherProducts)
            {
                <partial name="_RegularProductCard" model="product" />
            }
        </div>
        @if (Model.TotalPagesOther > 1)
        {
            <nav aria-label="Page navigation for other products" class="mt-4 d-flex justify-content-center">
                <ul class="pagination pagination-sm">
                    @if (Model.HasPreviousPageOther)
                    {
                        <li class="page-item"><a class="page-link" asp-action="Details" asp-route-id="@Model.Product.ProductTypeID" asp-route-currentPageOther="@(Model.CurrentPageOther - 1)">«</a></li>
                    }
                    else
                    {
                        <li class="page-item disabled"><span class="page-link">«</span></li>
                    }
                    @{
                        int maxPagesToShow = 5; // Số lượng trang tối đa hiển thị ở giữa
                        int startPage = Math.Max(1, Model.CurrentPageOther - (maxPagesToShow / 2));
                        int endPage = Math.Min(Model.TotalPagesOther, startPage + maxPagesToShow - 1);
                        if (endPage - startPage + 1 < maxPagesToShow) startPage = Math.Max(1, endPage - maxPagesToShow + 1);
                    }
                    @if (startPage > 1)
                    {
                        <li class="page-item"><a class="page-link" asp-action="Details" asp-route-id="@Model.Product.ProductTypeID" asp-route-currentPageOther="1">1</a></li> @if (startPage > 2)
                        {
                            <li class="page-item disabled"><span class="page-link">...</span></li>
                        }       }
                    @for (int i = startPage; i <= endPage; i++)
                    {
                        <li class="page-item @(i == Model.CurrentPageOther ? "active" : "")"><a class="page-link" asp-action="Details" asp-route-id="@Model.Product.ProductTypeID" asp-route-currentPageOther="@i">@i</a></li>
                    }
                    @if (endPage < Model.TotalPagesOther)
                    { @if (endPage < Model.TotalPagesOther - 1)
                        {
                            <li class="page-item disabled"><span class="page-link">...</span></li>
                        }
                        <li class="page-item"><a class="page-link" asp-action="Details" asp-route-id="@Model.Product.ProductTypeID" asp-route-currentPageOther="@Model.TotalPagesOther">@Model.TotalPagesOther</a></li>
                    }
                    @if (Model.HasNextPageOther)
                    {
                        <li class="page-item"><a class="page-link" asp-action="Details" asp-route-id="@Model.Product.ProductTypeID" asp-route-currentPageOther="@(Model.CurrentPageOther + 1)">»</a></li>
                    }
                    else
                    {
                        <li class="page-item disabled"><span class="page-link">»</span></li>
                    }
                </ul>
            </nav>
        }
    </section>
}

@section Styles {
    <style>
        .product-card {
            border: 1px solid #f0f0f0;
            transition: all .2s ease-in-out;
            display: flex;
            flex-direction: column;
            background-color: #fff;
            border-radius: .5rem;
            overflow: hidden;
        }

            .product-card:hover {
                box-shadow: 0 .3rem .8rem rgba(0,0,0,.12) !important;
                transform: translateY(-3px);
            }

        .product-card-img-link {
            display: block;
            overflow: hidden;
            border-bottom: 1px solid #f0f0f0;
            position: relative;
        }

        .product-card-img {
            width: 100%;
            height: 100%;
            object-fit: contain;
            transition: transform .3s ease;
            padding: .5rem;
        }

        .product-card:hover .product-card-img {
            transform: scale(1.03);
        }

        .product-card-body {
            padding: .75rem;
            flex-grow: 1;
            display: flex;
            flex-direction: column;
        }

        .product-card-footer {
            margin-top: auto;
            padding-top: .5rem;
            border-top: 1px solid #f0f0f0; /* Thêm đường kẻ nhẹ cho footer card */
        }

        .product-card .product-action-btn i {
            margin-right: .4rem;
        }

        /* Styles cho lưới sản phẩm (Recommended và OtherProducts trên trang Details) */
        .recommended-products-section-detail .product-card-img-link,
        .other-products-section-detail .product-card-img-link {
            height: 150px;
        }

        .recommended-products-section-detail .product-card-title, /* _HotDealProductCard title style */
        .other-products-section-detail .product-card-title-full { /* _RegularProductCard title style */
            font-size: 0.85rem;
            font-weight: 500;
            min-height: 2.6em;
            display: -webkit-box;
            -webkit-line-clamp: 2;
            -webkit-box-orient: vertical;
            overflow: hidden;
            text-overflow: ellipsis;
        }

        .recommended-products-section-detail .product-card-price {
            font-size: .9rem;
            text-align: center;
            font-weight: bold;
            color: #dc3545;
        }

        .recommended-products-section-detail .product-card-sold {
            font-size: .7rem;
            text-align: center;
            color: #6c757d;
        }

        .other-products-section-detail .product-card-desc-full {
            font-size: 0.8rem;
            min-height: 2.4em;
            display: -webkit-box;
            -webkit-line-clamp: 2;
            -webkit-box-orient: vertical;
            overflow: hidden;
            text-overflow: ellipsis;
        }

        .other-products-section-detail .product-card-price-unit-full {
            font-size: 0.9rem;
        }

        .other-products-section-detail .product-card-stock-full {
            font-size: 0.75rem;
        }

        .other-products-section-detail .product-action-btn {
            font-size: 0.8rem;
        }

        /* CSS cho Swiper trên trang Details */
        .recommended-swiper-detail .swiper-slide {
            padding-bottom: 40px;
            padding-left: 4px;
            padding-right: 4px;
            box-sizing: border-box;
        }

        .recommended-swiper-detail .swiper-pagination-bullet-active {
            background-color: #0d6efd !important;
        }

        .recommended-swiper-detail .swiper-button-next, .recommended-swiper-detail .swiper-button-prev {
            color: #0d6efd !important;
            transform: scale(.6);
            top: 42%;
        }

            .recommended-swiper-detail .swiper-button-next::after, .recommended-swiper-detail .swiper-button-prev::after {
                font-size: 1.4rem !important;
            }

        /* Nút Mua ngay và Thêm vào giỏ hàng trên trang Details */
        #addToCartFormDetail .product-action-btn {
            font-size: 0.9rem;
            padding: 0.5rem 0.75rem;
        }
    </style>
}

<form id="buyNowForm" method="post" action="/Cart/BuyNow" style="display: none;">
    <input type="hidden" name="productId" id="buyNowProductId" />
    <input type="hidden" name="quantity" id="buyNowQuantity" />
</form>



@section Scripts {
    <script>
        // Hàm này có thể đã được định nghĩa ở _Layout.cshtml nếu bạn dùng chung
        // Nếu không, bạn cần định nghĩa nó ở đây hoặc trong _Layout.
        function showToast(message, isError = false) {
            const toastContainer = document.getElementById('toastPlacement'); // Cần một container nếu muốn vị trí cố định
            const wrapper = document.createElement('div');
            wrapper.innerHTML = [
                `<div class="toast align-items-center text-white ${isError ? 'bg-danger' : 'bg-success'} border-0" role="alert" aria-live="assertive" aria-atomic="true" data-bs-delay="3000">`,
                '  <div class="d-flex">',
                `    <div class="toast-body">${message}</div>`,
                '    <button type="button" class="btn-close btn-close-white me-2 m-auto" data-bs-dismiss="toast" aria-label="Close"></button>',
                '  </div>',
                '</div>'
            ].join('');
            const toastEl = wrapper.firstChild;

            // Nếu bạn có một container cố định cho toast (ví dụ ở góc màn hình)
            // thì append vào đó, nếu không thì append vào body và tự định vị.
            if (toastContainer) {
                toastContainer.appendChild(toastEl);
            } else {
                toastEl.style.position = "fixed";
                toastEl.style.bottom = "1rem";
                toastEl.style.right = "1rem";
                toastEl.style.zIndex = "9999";
                document.body.appendChild(toastEl);
            }
            const toast = new bootstrap.Toast(toastEl);
            toast.show();
            toastEl.addEventListener('hidden.bs.toast', () => toastEl.remove());
        }


        function updateQuantityOnDetailPage(productId, change, maxStock) {
            const inputElement = document.getElementById(`quantity_${productId}`);
            if (inputElement) {
                const isContinuous = inputElement.step === "0.01";
                let currentValue = isContinuous ? parseFloat(inputElement.value) : parseInt(inputElement.value, 10);
                let newValue = currentValue + change;
                const minVal = isContinuous ? 0.01 : 1;

                if (isNaN(currentValue)) currentValue = minVal;

                // Giới hạn giá trị
                if (newValue < minVal) {
                    newValue = minVal;
                } else if (newValue > maxStock) {
                    newValue = maxStock;
                }

                inputElement.value = isContinuous ? newValue.toFixed(2) : newValue.toString();
            }
        }

        function submitBuyNow(productId) {
            const quantityInput = document.getElementById(`quantity_${productId}`);
            if (!quantityInput) {
                showToast("Lỗi: Không tìm thấy số lượng sản phẩm.", true);
                return;
            }
            const quantity = quantityInput.value;
            const token = $('#antiForgeryTokenContainer input[name="__RequestVerificationToken"]').val(); // Giả sử _Layout có form này

            if (!token) {
                showToast("Lỗi bảo mật (thiếu token).", true);
                return;
            }

            fetch("@Url.Action("BuyNow", "Cart")", {
                method: "POST",
                headers: {
                    "Content-Type": "application/x-www-form-urlencoded",
                    "RequestVerificationToken": token,
                    "X-Requested-With": "XMLHttpRequest"
                },
                body: new URLSearchParams({ productId, quantity })
            })
                .then(response => {
                    if (!response.ok) {
                        return response.json().then(errData => Promise.reject(errData.message || errData || "Lỗi không xác định từ máy chủ."));
                    }
                    return response.json();
                })
                .then(data => {
                    if (data.success) {
                        // Đối với BuyNow, nếu thành công và có redirectUrl, chúng ta sẽ chuyển hướng.
                        // Việc cập nhật badge giỏ hàng sẽ xảy ra khi trang mới (ví dụ: trang checkout hoặc chi tiết đơn hàng) được tải.
                        if (data.redirectUrl) {
                            window.location.href = data.redirectUrl;
                        } else {
                            showToast(data.message || "Đã xử lý mua ngay.", false);
                            // Nếu BuyNow không redirect mà chỉ thêm vào giỏ và bạn muốn cập nhật badge ngay:
                            // $(document).trigger('minimart.cart.updated');
                        }
                    } else {
                        showToast(data.message || "Đã xảy ra lỗi không xác định khi mua ngay.", true);
                    }
                })
                .catch(error => {
                    console.error("Lỗi khi xử lý Mua ngay (Detail Page):", error);
                    const errorMessage = typeof error === 'string' ? error : "Đã xảy ra lỗi kết nối với máy chủ khi mua ngay.";
                    showToast(errorMessage, true);
                });
        }

        document.addEventListener("DOMContentLoaded", function () {
            // Swiper setup
            const recommendedProductsCountDetail = @(Model.RecommendedProducts?.Count ?? 0);
            if (document.querySelector('.recommended-swiper-detail') && recommendedProductsCountDetail > 0) {
                new Swiper('.recommended-swiper-detail', {
                    slidesPerView: 1.8,
                    spaceBetween: 8,
                    grabCursor: true,
                    loop: recommendedProductsCountDetail > 5, // Điều chỉnh ngưỡng loop nếu cần
                    pagination: {
                        el: '.recommended-pagination-detail',
                        clickable: true
                    },
                    navigation: {
                        nextEl: '.recommended-next-detail',
                        prevEl: '.recommended-prev-detail'
                    },
                    breakpoints: {
                        576: { slidesPerView: 2.5, spaceBetween: 10 },
                        768: { slidesPerView: 3.5, spaceBetween: 10 },
                        992: { slidesPerView: 4.5, spaceBetween: 12 },
                        1200: { slidesPerView: 5.5, spaceBetween: 12 }
                    }
                });
            }

            // AJAX AddToCart
            document.querySelectorAll(".add-to-cart-ajax").forEach(button => {
                button.addEventListener("click", function (e) {
                    e.preventDefault();
                    const form = this.closest("form"); // form#productActionForm_...
                    if (!form) {
                        showToast("Lỗi: Không tìm thấy form sản phẩm.", true);
                        console.error("Nút 'Thêm vào giỏ' không nằm trong form.");
                        return;
                    }
                    const productIdInput = form.querySelector("input[name='productId']");
                    const quantityInput = form.querySelector("input[name='quantity']");

                    if (!productIdInput || !quantityInput) {
                        showToast("Lỗi: Thiếu thông tin sản phẩm hoặc số lượng.", true);
                        console.error("Thiếu input productId hoặc quantity trong form.");
                        return;
                    }

                    const productId = productIdInput.value;
                    const quantity = quantityInput.value;
                    // Lấy Antiforgery token từ form ẩn trong _Layout.cshtml
                    const token = $('#antiForgeryTokenContainer input[name="__RequestVerificationToken"]').val();

                    if (!token) {
                        showToast("Lỗi bảo mật (thiếu token).", true);
                        return;
                    }

                    fetch("@Url.Action("AddToCart", "Cart")", {
                        method: "POST",
                        headers: {
                            "Content-Type": "application/x-www-form-urlencoded",
                            "RequestVerificationToken": token,
                            "X-Requested-With": "XMLHttpRequest"
                        },
                        body: new URLSearchParams({ productId, quantity })
                    })
                        .then(response => {
                            if (!response.ok) { // Kiểm tra nếu response không thành công (ví dụ 4xx, 5xx)
                                // Cố gắng đọc lỗi JSON nếu có, nếu không thì dùng text
                                return response.json()
                                    .catch(() => response.text().then(text => Promise.reject(text || "Lỗi không xác định từ máy chủ.")))
                                    .then(errDataOrText => Promise.reject(errDataOrText.message || errDataOrText));
                            }
                            return response.json();
                        })
                        .then(data => {
                            showToast(data.message, !data.success); // Hiển thị thông báo từ server
                            if (data.success) {
                                console.log("AddToCart (Detail Page) success, triggering 'minimart.cart.updated'");
                                $(document).trigger('minimart.cart.updated'); // KÍCH HOẠT SỰ KIỆN ĐỂ _LAYOUT CẬP NHẬT BADGE
                            }
                        })
                        .catch(error => {
                            console.error("Lỗi khi thêm vào giỏ hàng (Detail Page):", error);
                            const errorMessage = typeof error === 'string' ? error : "Đã xảy ra lỗi kết nối với máy chủ.";
                            showToast(errorMessage, true);
                        });
                });
            });
        });
    </script>
}
