@using MinimartWeb.Model
@model IEnumerable<MinimartWeb.Model.Notification>

@{
    ViewData["Title"] = "Thông báo của tôi";
}

<div class="container my-4">
    <h2 class="mb-4">
        <i class="fas fa-bell text-primary me-2"></i>Thông báo của bạn
    </h2>

    @if (!Model.Any())
    {
        <div class="alert alert-info">
            <i class="fas fa-info-circle me-2"></i> Bạn không có thông báo nào.
        </div>
    }
    else
    {
        <div class="row g-3">
            @foreach (var notification in Model)
            {
                // Build the URL properly with RouteUrl to match the route attribute in the controller
                var url = (notification.NotificationType == "Order Status Update" && notification.SaleID.HasValue)
                ? Url.RouteUrl("default", new { controller = "Sales", action = "OrderDetail", id = notification.SaleID })
                : "javascript:void(0)"; // No URL, just a placeholder

                <div class="col-md-6 col-lg-4">
                    <div class="card shadow-sm notification-card @(!notification.IsRead ? "border-primary" : "border-light")"
                         data-id="@notification.NotificationID"
                         data-url="@url"
                         style="cursor: pointer;">
                        <div class="card-body">
                            <div class="d-flex align-items-center mb-2">
                                <i class="@GetIcon(notification.NotificationType) me-2"
                                   style="font-size: 1.5rem; color: @(!notification.IsRead ? "#0d6efd" : "#6c757d");">
                                </i>
                                <h5 class="card-title mb-0">
                                    @(notification.Title)
                                </h5>
                            </div>
                            <p class="card-text text-muted">@notification.Message</p>
                            <small class="text-muted">
                                <i class="far fa-clock me-1"></i> @notification.CreatedAt.ToString("dd/MM/yyyy HH:mm")
                            </small>
                        </div>
                    </div>
                </div>
            }

        </div>
    }
</div>

<style>
    /* Hover effect and highlight */
    .notification-card:hover {
        border-color: #0d6efd !important;
        box-shadow: 0 4px 20px rgba(13, 110, 253, 0.2) !important;
    }
</style>

<script>
    document.addEventListener("DOMContentLoaded", function () {
        console.log("🟢 JavaScript Loaded Successfully");  // ✅ Step 1: JS Loaded

        // Register click event
        document.querySelectorAll('.notification-card').forEach(card => {
            console.log("🔎 Found card with ID:", card.dataset.id);  // ✅ Step 2: Cards found

            card.addEventListener('click', function () {
                const url = card.dataset.url;
                const notificationId = card.dataset.id;

                console.log("🟠 Card Clicked - URL:", url, "ID:", notificationId);  // ✅ Step 3: Log Click

                if (url && url !== "javascript:void(0)") {
                    console.log("➡️ Redirecting to:", url);
                    window.location.href = url;
                } else {
                    console.warn("⚠️ No URL for this notification.");
                }

                // Send AJAX request to mark as read
                fetch('/Notifications/MarkAsRead', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                        'X-CSRF-TOKEN': $('input[name="__RequestVerificationToken"]').val()
                    },
                    body: JSON.stringify({ notificationId: notificationId })
                })
                .then(response => {
                    if (response.ok) {
                        console.log("✅ Marked as read:", notificationId);
                        card.classList.remove('border-primary');
                        card.classList.add('border-light');
                    } else {
                        console.error("❌ Failed to mark as read");
                    }
                })
                .catch(err => console.error("❌ AJAX Error:", err));
            });
        });
    });
</script>

@functions {
    public string GetIcon(string notificationType)
    {
        return notificationType switch
        {
            "Account Related" => "fas fa-user",
            "Order Status Update" => "fas fa-box",
            "Security Alert" => "fas fa-shield-alt",
            "Promotion" => "fas fa-tags",
            "System Message" => "fas fa-info-circle",
            _ => "fas fa-bell"
        };
    }
}
